// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Translation is an autogenerated mock type for the Translation type
type Translation struct {
	mock.Mock
}

// GetLocale provides a mock function with given fields:
func (_m *Translation) GetLocale() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetLocale provides a mock function with given fields: locale
func (_m *Translation) SetLocale(locale string) {
	_m.Called(locale)
}

// Trans provides a mock function with given fields: key, args
func (_m *Translation) Trans(key string, args ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(key, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewTranslation interface {
	mock.TestingT
	Cleanup(func())
}

// NewTranslation creates a new instance of Translation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTranslation(t mockConstructorTestingTNewTranslation) *Translation {
	mock := &Translation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

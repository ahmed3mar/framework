// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	translation "github.com/goravel/framework/contracts/translation"
	mock "github.com/stretchr/testify/mock"
)

// Translation is an autogenerated mock type for the Translation type
type Translation struct {
	mock.Mock
}

// Add provides a mock function with given fields: name, locale, val
func (_m *Translation) Add(name string, locale string, val interface{}) {
	_m.Called(name, locale, val)
}

// Get provides a mock function with given fields: path, locale, options
func (_m *Translation) Get(path string, locale string, options ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, path, locale)
	_ca = append(_ca, options...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) string); ok {
		r0 = rf(path, locale, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDefaultLocale provides a mock function with given fields:
func (_m *Translation) GetDefaultLocale() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Language provides a mock function with given fields: locale
func (_m *Translation) Language(locale string) translation.Language {
	ret := _m.Called(locale)

	var r0 translation.Language
	if rf, ok := ret.Get(0).(func(string) translation.Language); ok {
		r0 = rf(locale)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(translation.Language)
		}
	}

	return r0
}

// Load provides a mock function with given fields: path, locale
func (_m *Translation) Load(path string, locale ...string) error {
	_va := make([]interface{}, len(locale))
	for _i := range locale {
		_va[_i] = locale[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, path)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(path, locale...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTranslation interface {
	mock.TestingT
	Cleanup(func())
}

// NewTranslation creates a new instance of Translation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTranslation(t mockConstructorTestingTNewTranslation) *Translation {
	mock := &Translation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

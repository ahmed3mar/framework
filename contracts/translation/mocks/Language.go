// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Language is an autogenerated mock type for the Language type
type Language struct {
	mock.Mock
}

// Add provides a mock function with given fields: name, val
func (_m *Language) Add(name string, val interface{}) {
	_m.Called(name, val)
}

// Get provides a mock function with given fields: path, options
func (_m *Language) Get(path string, options ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, path)
	_ca = append(_ca, options...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(path, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Load provides a mock function with given fields: path
func (_m *Language) Load(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewLanguage interface {
	mock.TestingT
	Cleanup(func())
}

// NewLanguage creates a new instance of Language. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLanguage(t mockConstructorTestingTNewLanguage) *Language {
	mock := &Language{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
